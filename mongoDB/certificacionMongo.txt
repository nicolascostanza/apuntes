************************************ INTRODUCCION ********************************************************************

* mongosh ---> mongodb por terminal
* db.help() ---> poniendo eso en mongosh te da el manual de los comandos
* mongodb atlas ---> DBAAS (database as a service)
* existen 2 tipos de cluster ---> compartidos y dedicados
* cluster compartidos ---> son mas chicos y generalmente mas baratos
* cluster dedicados ---> son mas grandes y se pueden personalizar. Tiene aplicaciones para aplicaciones de trafico alto y bajo. Y otras cosas de seguridades que son mejores
* Mongodb atlas tiene la ventaja de que se adapta a cualquier plataforma en la nube y podes modificarla sin problema (AWS, google cloud, etc)
* Se pueden hacer backups
* Los documentos son casi iguales a un JSON. Son la unidad basica de datos en mongodb
* Una collection es un grupo de documentos agrupados bajo un nombre
* database es el contenedor de nuestras collections
* Los archivos JSON que enviamos se almacenan en formato BSON (significa json binario), agrega soporte a los tipos de datos adicionales que no tienen los archivos JSON
* tipos de datos ---> string, boolean, array, object, number, date, objectId, etc !
* objectId es un id unico generado por mongodb que actua como clave primaria para identificar cada documento como unico
* si el documento que enviamos para crear no tiene el campo _id mongodb lo crea automaticamente
* la capa de validacion al trabajar con bases de datos no relacionales es esencial ya que nos hace mas estricta las condiciones de nuestro schema. sino los campos por ejemplo al no mandar nada los guardaria como null o cosas que pueden generar error en el codigo de la aplicacion 
* herramienta para visualizar los datos de la DB

************************************ CONECTAR MONGODB ********************************************************************

* nos podemos conectar a una base de datos de mongo desde la terminal, mongocompass o de cualquier aplicacion
* hay dos formas de hacer una conexion: formato standar y formato de lista de semillas de DNS
* el formato estandar se usa para conectarse a clusters autonomos, conjuntos de replicas o clusters afiliados 
* el formato de lista de semillas de DNS nos permite proporcionar una lista de servidores DNS a nuestra corriente de conexion(es mas flexible para el deploy y capacidad de cambiar servidores sin reconfigurar o alterar a ningun cliente)
* cuando ponemos connect en mongodb atlas tenemos las 3 opciones de conexion.
* en uno de los pasos nos sale el string para la conexion en el cual tenemos que cambiar la password y el username
* sintaxis del string de conexion:
mongodb ---> dice q es una conexion a la base de datos de mongo
+srv ---> agrega la seguridad TLS y indica a mongo que utilice la lista de semillas DNS
username y password ---> debemos reemplazar por nuestros datos
host ---> esta el host y el numero de puerto, que es opcional, si no se especifica el numero de puerto mongo toma por default el 27017
options ---> despues del "?" tiene las opciones que queremos incluir a la conexion como el tiempo de espera de la conexion, TLS y SSL, opciones de lectura y escritura. El retryWrites en true indica a mongo que se reintente automaticamente cuando fallan determinados tipos de operaciones de grabacion

CONEXION CON MONGOSH (MONGO SHELL)

* primero tenemos que tener instalado mongodbshell o mongosh
* seleccionamos el connect y despues la opcion de conexion por shell, seguimos los pasos y compiamos el string.
* vamos a la terminal, pegamos el string y le damos enter. Ingresamos la contraseña de administrador o de mi cuenta en atlas, nose
* conexion terminada y te salen los datos de la conexion realizada con exito
* mongodbShell es un entorno REPL de nodejs. Esto quiere decir que podemos hacer js dentro de la terminal con mongosh

CONEXION CON MONGODBCOMPASS

* ponemos connect y elegimos la opcion de mongocompass o gui, copiamos el string de conexion
* vas a mongodb compass y pones nueva coneccion, ponemos la url, modificamos la password y le damos a guardar y conectar
* una vez adentro a la izquierda tenemos las collections y arriba en el medio tenemos queries(y agregations), databases (podemos ver el rendimiento y la capacidad almacenada de cada base de datos) y performance(muestra metricas de rendimiento)

MONGODB DRIVERS

* para saber de drivers hay que ir a mongodb.com/docs/drivers

ERRORES DE CONEXION MAS COMUNES

* errores de acceso de red ---> puede ser pq la ip no esta autorizada ---> ir a mongoDB atlas en la parte izquierda ---> network access ---> ip access list y agregamos nuestra ip 
* errores de autenticacion de usuario ---> pq falta actualizar la contraseña en el string de conexion

************************************ OPERACIONES CRUD *************************************************************

* existen muchos operadores como el $in, $eq, etc, se pueden investigar en la documentacion de mongo

CREATE

* para usar una base de datos desde la terminal tenemos que poner ---> use nombreBaseDatos
* Tenemos dos opciones, insertMany([Array de jsons a enviar]) o insertOne(json_file)
* lo que hacen es nombreDataBase.NombreCollection.insertOne(json_file)
* si la collecction no existe, la crea
* cada documento tiene el campo _id que es unico

BUSQUEDA

* tenemos el metodo find(condicion)
* sintaxis: db.collection.find(condicion)
* $in ---> podemos usar el operador $in permite traer todos los documentos que tengan un valor del array con valores que le pasamos al operador $in
* $nin ---> la inversa, no tienen que estar esos valores que le pasamos en el array
* $eq ---> para que sea igual a cierto valor
* $neq ---> no tiene que ser igual a cierto valor

OPERADORES DE COMPARACION

* $gt y $gte ---> mas grande o (mas grande o igual) ---> "field" : { $gt: value}
* $lt y $lte ---> mas chico o (mas chico o igual)

BUSQUEDA EN UN ARRAY

* Podemos hacer condiciones logicas no solo buscar un valor determinado al buscar cxon elemMatch
* $elemMatch ---> condicion que debe cumplir un elemento del field que sea un array para que devuelva el documento. Ejemplo:
* field: { $elemMatch: {$eq: "lo que deberia tener"}, { query2}, {query3}, ...}

OPERADORES LOGICOS
* $and ---> db.collection.find({$and: [{expresion 1}, {expresion 2}]}) ---> debe cumplir todas
* $or ---> lo mismo q el and pero con una sola condicion que debe cumplir
* si tenemos 2 o mas $or, usemos un $and que lo encierre, pq sino el json que enviamos termina quedandose con el or del final ya que sobreescribiria los anteriores

OPERADORES PARA REEMPLAZAR

* replaceOne(filtro, con lo que se reemplaza, opciones ) ---> reemplaza un solo documento
* updateOne(filtro, con lo que se reemplaza, opciones ) ---> actualiza un solo documento
* $set ---> hace una de dos cosas, añade nuevos campos y valores a un documento o reemplaza el valor de un campo por un valor especifico
* $push ---> hace una de dos cosas, añade un valor a un array o si el campo no existe crea el array con el valor que le pasamos
* upsert ---> es un parametro que se le pasa en el objeto de options a los metodos. Hace la query y si no existe ninguno que matchee con el filtro crea uno y lo añade. Sirve con updateOne por ejemplo.
* findAndModify(query,newDoc,options) ---> se utiliza para devolver el documento que actualizamos. Ademas garantiza en una sola request a la base de datos actualizar y devolver el doc. Ademas hay que setear en options new: true;
* updateMany(query, newDocModify, options) ---> busca todos los que matcheen y los modifica por lo que le pasamos. Puede que a veces no se actualicen todos y haya que volver a actualizar los que falten. Ademas, cuando se esta ejecuntando la actualizacion no queda oculta por lo tanto para transferencias bancarias o cosas de extrema seguridad no es recomendable.
* find() ---> podemos pasarle como segundo param el nombre de las propiedades con 1 para que solo traiga esas props de cada documento. Ejemplo:
db.companies.find({price: 100}, {name: 1, status: 1})

BORRAR

* deleteOne(filtro, opciones) ---> borra un documento, el primero que matchee
* deleteMany(filtro, options) ---> borra todos los documentos que matcheen

ORDENAMIENTO Y LIMITE

* cursor ---> es un puntero al conjunto de resultados de una consulta. Por ejemplo el metodo find devuelve un cursor
* sort() ---> este metodo se pasa desp del metodo find, concatenado por '.'. Sumado a eso debemos especificar el como los vamos a ordenar. Ademas podemos pasarle varios sorts concatenados uno atras del otro. Ejemplo:
// ordenamos los encontrado en order ascendente por la propiedad name de cada documento
db.companies.find({status: 'music'}).sort({name: 1}).sort({price: -1})
* Para el ordenamiento alfabetico en mongodb primero se ordenan las mayusculas y luego las minusculas
* limit(numero limite) ---> limita la cantidad de respuestas de una query. Ejemplo:
db.companies.find({status: 'music'}).limit(3) // devuelve solo 3 companies que tengan el status en music

PROYECCIONES

* las proyecciones sirven para devolver solo algunos campos que nos importen de cada documento. Podemos incluir esos campos en la devolucion con el 1 y sacarlos con un 0, ejemplo:
db.companies.find({price: 100}, {name: 1, status: 1, _id: 0})
* en las proyecciones podemos elegir entre incluir algunos campos o excluir algunos campos. La unica excepcion a esa regla es el _id de mongo. Todo el resto de campo se debe optar por solo incluir o solo excluir.

CONTEO DE DOCUMENTOS EN UNA QUERY

* countDocuments(query, options) ---> sirve para contar los documentos de una consulta. Ejemplo:

db.companies.countDocuments(); // cuenta todos los documentos de la coleccion
db.companies.countDocuments({status: true}); // solo cuenta los documentos que cumplan esa condicion

AGREGATION

* agregation es una tecnica que agarra los datos de la base de datos y altera los resultados sin modificar los datos en la DB. Es un consulta en varias capas
* etapas del agregate en orden correcto (pipeline aggregation)
** $match ---> filtrado de documentos por una condicion o un grupo de condiciones. Es importante intentarla ponerla lo mas temprana posible para reducir la cantidad de documento y operaciones
** $group ---> agrupamos documentos por una clave de grupo. Aca sale un documento para cada clave de grupo ingresada.
** $sort ---> los agarra y los ordena segun como queramos( 1 para ascendente, -1 para desendente)
** $limit ---> limita la cantidad de documetnos resultantes
** $project ---> determina la forma de salida de los documentos que van a resultar de la query. O permite agregar nuevos campos q la agregation hara. Se pueden especificar por inclusion( le ponemos 1 al value del field en cueston) o exclusion ( le ponemos 0 si lo queremos excluir). Si los campos son nuevo podemos especificarles el valor que queremos asignarle. Seria como una capa de mapeo en donde elegimos que campos si y que campos no
** $set ---> en lugar de espeficiar como en el project state, esto añade o modifica campos existentes
** $count ---> cuenta la cantidad de documentos en la pipeline y te devuelve ese numero
** $out ---> crea una nueva collection a partir de la pipeline de aggregation. Guarda los documentos devuelvo por el aggregate en una nueva collection. Siempre debe ser la ultima etapa. Tener cuidado que a veces la puede sobreescribir. Recibe db: y el nombre de la colelction y coll: con el nuevo nombre de la collection. Cuando usamos esto el resultado de la query esta vacio.

* cuando un campo tiene antes el '$' significa que es la via de acceso al campo especifico. Nos permite referirnos al valor del campo

* ejemplo de pipeline de aggregate:

db.collection.aggregate([
  {
    $match: { "state": "CA"}
  },
  {
    $group:
    {
      _id: "$city", // group key
      totalZip: { $count: {}}
    }
  },
  {
    $sort : {
      pop: -1
    }
  },
  {
    $limit: 3
  },
  {
    $project: {
      state: 1,
      zip: 0,
    }
  },
  {
    $set: {
      isAdult: // aca restariamos de la fecha actual a la fecha de nacimiento y deberia ser mayor a 18 años
    }
  },
  {
    $count: "campoAContar"
  },
  {
    $out: "nombre de la nueva collection en donde lo va a guardar"
  }
])

INDEX O INDICES

* los indices son estructuras de datos especiales que almacenan una pequeña parte de los datos de las collections de una forma ordenada que es facil de recorrer y buscar de forma eficiente
* los indices apuntan a la identidad del documento y permiten buscar, acceder o editar rapidamente
* se usan para mejorar el rendimiento y la rapidez de la query
* por defecto solo hay un indice creado por collection ( _id ). Los indices tienen un costo de rendimiento en escritura (agregar o editar)
* indices mas comunes ---> de campo compuesto o individuales. La diferencia es q el compuesto esta hecho con mas de un campo

* createIndex() Ejemplo:

db.coll.createIndex({email: 1}, {unique: true}) ---> creamos un indice por email y le decimos q va a ser unico para cada documento. Ademas al ponerle unique hace q no podamos asignarle el mismo mail a dos cuentas

* getIndexes() Ejemplo:

db.coll.getIndexes() --> devuelve todos los indices q tiene esa collection

* explain() ---> sirve para determinar si alguno de los indices se esta usando en la query. Devuelve un objeto con una prop q se llama winningPlan que explica el metodo q uso para la query y cuales intento pero los rechazo, etc
* en winningPlan tenemos opciones como:
** IXSCAN ---> indica q busco por un indice existente
** COLLSCAN ---> indica q no encontro un indice por el cual hacer la consulta
** FETCH ---> indica q solo fue de lectura
** SORT ---> indica q fue de ordenamiento ??

* Ejemplo:

db.coll.explain().find({// query})

* indices Compuestos ---> cuando definimos un indice en algun campo q sea un array ya es conciderado indice compuesto. Existe una limitacion de un array por indice. Ejemplo de creacion de uno compuesto.

db.coll.createIndex({email: 1, account: 1})

* los indices son estructuras ordenadas, por lo cual importa q el primer indice sea el mas relevante. La orden de importancia va asi en un indice compuesto es asi:

1) de igualdad
2) de ordenamiento
3) de rango

* borrado de indices

* se puede borrar cualquier indice menos el _id
* si no estas seguro si el indice es necesario, es preferible ocultarlo a eliminarlo. Ya que mongo los omite en las busquedas.
* ocultamiento de indice. Sirve para q mongo no los utilice en las consulta, pero continua actualizandolo cuando agregamos o editamos. Ejemplo:

** ocultamiento
db.coll.hideIndex('nombre indice')

** borrado
db.coll.dropIndex('nombre del indice')
db.coll.dropIndexes(['indice 1', 'indice 2', '...etc'])

SEARCH INDEX O INDICES DE BUSQUEDA

* search atlas es una busqueda rapida e inteligente q probee mongo, sirve para q los usuarios finales pongan lo que quieren y con su algoritmo lo busque rapidamente sin hacer una demora rapida como si estuvieramos haciendo a mano la logica de busqueda y las request necesarias para esa logica.
* los index de busqueda no son los mismo que los index de la base de datos, son para busquedas de usuarios y trabajan por relevancia, como una busqueda de google seria
* index de busqueda se utilizan para la busqueda basada en la relevancia 
* los componentes de un index de busqueda de atlas incluyen informacion sobre los analizadores que se estan utilizando, el tipo de la correlacion (si es dinamico o no), una opcion para almacenar documentos completos en memoria para un rendimiento posterior a un aggregate y las correlaciones a campos
* index search con correlacion dinamica significa que cuando se ejecuta el algoritmo todos los campos se indexaran (menos booleanos, object id, indicadores de fecha y hora)
* lucene.standar ---> lucene es una libreria de motor de busqueda de codigo abierto creo, standar se refiere a como vamos a tokenizar los datos en trozos de busqueda
* dinamic mapping ---> se deja on para que mire a travez de todos los fields
* si creamos un search index, desp podemos desde mongo atlas o compass, y buscar por cualquier palabra que tenga el documento y aparece
* indexacion estatica hace q la query sea mas rapida, esto se haria con dinamic mapping desabilitado y agregar los campos necesarios a mano. Para esto desactivamos dinamic mapping cuando creamos un search index y ponemos add field, luego elegimos el campo que queremos y vemos q el data type sea string,
* en la pipeline de agreggate existe la etapa $search, la cual dentro tiene $compound(especifica como se deben clasificar los resultados). Aca podemos rankear de que campos nos interesan mas o menos para la busqueda (orden de importancia)

must ---> solo incluyen los q matcheen con esta condicion
must not ---> lo contrario a must
should ---> asignara un peso a cada registro
filter ---> elimina cualquier resultado de la busqueda anterior q no coincida con la condicion de este filtro

* podemos hacer un agregate desde mongo atlas o mongo compass yendo a la tab de aggregate. Ejemplo de search

$search {
  "compound": {
    "must": [{
      "text": {
        "query": "field",
        "path": "habitat"
      }
    }],
    "should": [{
      "range": {
        "gte": 45,
        "path": "wingspan_cm",
        "score": {"constant": {"value": 5}}
      }
    }]
  }
}

* $searchMeta ---> personaliza los resultados de la busqueda categorizandolos. Los separa en distintas facetas o bloques, las facetas son cubos en los que agrupamos nuestros resultados de busqueda. Ejemplo de una pipeline de aggregate para personalizar:

$searchMeta: {
    "facet": {
        "operator": {
            "text": {
            "query": ["Northern Cardinal"],
            "path": "common_name"
            }
        },
        "facets": {
            "sightingWeekFacet": {
                "type": "date",
                "path": "sighting",
                "boundaries": [ISODate("2022-01-01"), 
                    ISODate("2022-01-08"),
                    ISODate("2022-01-15"),
                    ISODate("2022-01-22")],
                "default" : "other"
            }
        }
    }
}


TRANSACCIONES

* por ejemplo al realizar una transferencia, debe sacarse el dinero de una cuenta y luego sumarsela a la otra, deben suceder todas juntas o si falla en el medio q no se ejecute ninguna accion
* ACID transaccion ---> son un grupo de operacion de base de datos que se completaran conjuntamente como una unidad o fallaran todas y no se ejecutara ninguna 
* ACID ---> es un acronimo que se usa para describir las propiedades que tienen las transacciones (atomicidad, consistencia, aislamiento, durabilidad)
* atomicidad ---> o se ejecutan todas con exito o no se ejecuta ninguna
* consistencia ---> todos los cambios realizados por las operaciones deben ser coherentes
* aislamiento ---> varias transacciones pueden ocurrir al mismo tiempo sin afectar el resultado de otras transacciones, tambien garantiza que los efectos de las operaciones en una transaccion se aislen de otras operaciones que se ejecuten en la base de datos al mismo tiempo
* durabilidad ---> garantiza q los cambios que realicen las operaciones en una transaccion son persistentes incluso en el caso de una falla de energia o de hardware
* el findOneAndUpdate tiene atomicidad ya q es uno solo, pero si debemos actualizar varios hay q ver como hacer para q ocurran todos o no ocurra ninguno
* Para hacer una transaccion multiple y abortarla en caso de que falle:
* abrimos una session() en el try ---> es un grupo de operaciones de base de datos que estan relacionadas y se deben ejecutar en conjunto. Es importante saber que tiene por defecto de tiempo de ejecucion 1 minuto. Es como se hacen en los endpoints del back de qira

const session = await startSession();
session.startTransaction();
// request necesarias, en tiempo de 1 minuto, poniendole el .session() a cada una
// si termina bien al final del try ponemos
await session.commitTransaction();
// si termina mal en el catch ponemos 
await session.abortTransaction();
// en el finally ponemos
session.endSession();

*** TODO 






***************** datos utiles *****************

* para acceder a props dentro de objetos en una query podemos hacer en el nombre del campo, osea en la key con string. Ejemplo
db.companies.find({'address.zip': 2000})
* $toUpper: "nombre campo" ---> convierte a uppercase
* para la etapa de project en el aggregate hay muchas funciones de suma, division, promedio, etc en mongo

***************** dudas ***********************************

* que es atlas data lake, atlas data federations, atlas charts
* que son DNS
* que es TLS y SSL, son algo de seguridad ?
* estudiar etapas del aggregate
* ESTUDAIR Y VER ETAPAS FALTANTES ---> $unwind y $bucket
* ver los tipos de winningPlan que hay cuando usamos explain() en una query. Aca tengo info para guiarme:

Check if an index is being used on a query
Use explain() in a collection when running a query to see the Execution plan. This plan provides the details of the execution stages (IXSCAN (busco por un indice creo) , COLLSCAN (no busca por indice), FETCH (es solo lectura), SORT (ordena), etc.).

The IXSCAN stage indicates the query is using an index and what index is being selected.
The COLLSCAN stage indicates a collection scan is perform, not using any indexes.
The FETCH stage indicates documents are being read from the collection.
The SORT stage indicates documents are being sorted in memory.
existen muchisimas etapas en el aggregate, investigar
