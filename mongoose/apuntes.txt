* Todo en Mongoose comienza con un schema. Cada esquema se asigna a una colección MongoDB y define la forma de los documentos dentro de esa colección.
* tipos de datos permitidos para un schema: String, Number, Date, Buffer, Boolean, Mixed, ObjectId, Array, Decimal128, Map
* el tipo mixed es para q se le pueda poner cualquier cosa, le podes poner Schema.Types.Mixed o pasarle un objeto vacio
* Te podes conectar con mongodb usando el metodo mongoose.connect('url', options)
* existen eventos de connecion como por ejemplo connecting, connected, close, disconnected, etc
* mongoose soporta conexiones a cluster con SSL, ademas se le pueden agregar validaciones -->
  const username = 'myusername';
  await mongoose.connect(`mongodb://${encodeURIComponent(username)}@localhost:27017/test`, {
    ssl: true,
    sslValidate: true,
    sslCA: `${__dirname}/rootCA.pem`,
    authMechanism: 'MONGODB-X509'
  });
* Los modelos son constructores, sirven para leer o crear instancias de algo y trabajar con mongodb
* cuando llamamos mongoose.model() en el schema, mongoose nos compila el modelo por nosotros. Ejemplo:

  const schema = new mongoose.Schema({ name: 'string', size: 'string' });
  const Tank = mongoose.model('Tank', schema);

** El primer argumento es el nombre singular de la colección para la que es tu modelo. Mongoose busca automáticamente la versión plural en minúsculas del nombre de su modelo. Por lo tanto, para el ejemplo anterior, el modelo Tank es para la colección de tanques en la base de datos.

* Document y Model son clases distintas en Mongoose. La clase Model es una subclase de la clase Document. Cuando usa el constructor de modelos, crea un nuevo documento.

* find, findById, findOne, where, deleteOne, deleteMany, save, update, updateMany, updateOne, findOneAndUpdate, validate

* Existen modelos de solo lectura

* Para sobreexcribir un documento existen 2 metodos, el .save() y Model.replaceOne() . Ejemplo del replaceOne:

  await Person.replaceOne({ _id }, { name: 'Jean-Luc Picard' });

* se puede usar el .create()y el .remove() para agregarle o quitarle propiedades a un documento

* .pull() sirve para borrar un array del objeto (o para borrar un subdocumento de tipo array)

* .remove() deja el subdocumento o propiedad en null

* .parent() sirve para asignarlo en una propiedad y acceder al padre. Ejemplo child.parent()

* .ownerDocument() sirve por si hay un subdocumento muy anidado agarrar el padre principal, el del nivel superior

* .countDocument() ---> cuenta todos los documentos de un Modelo. Se le puede pasar como parametro un filtro

* .lean() --->  le dice a Mongoose que omita la hidratación de los documentos de resultados. Esto hace que las consultas sean más rápidas y requieran menos memoria, pero los documentos de resultados son objetos JavaScript. Te borra por ejemplo el __v o todas las props q agrega mongoose y mongodb. Si se usa el populate y luego el lean, el lean se propaga a los objetos populados. Es conveniente usar .lean() cuando el documento no sea modificado. Por ejemplo usarlo en los get o getById, pero no en los put, post, patch o delete

* Operaciones para CRUD. Todos tienen 3 parametros, (filtros o condiciones, objeto actualizado, opciones)

Model.deleteMany()
Model.deleteOne()
Model.find()
Model.findById()
Model.findByIdAndDelete()
Model.findByIdAndRemove()
Model.findByIdAndUpdate()
Model.findOne()
Model.findOneAndDelete()
Model.findOneAndRemove()
Model.findOneAndReplace()
* Model.findOneAndUpdate() --> busca el primer documento y lo devuelve actualizado. Por defecto mongoose devuelve el documento sin ser actualizado, para q devuelva el nuevo debemos pasarle en las options new: true .Ejemplo

await Character.findOneAndUpdate(filter, update, {
  new: true
});

Model.replaceOne()
Model.updateOne()
Model.updateMany()

* .aggregate(<Condiciones de mongodb para trabajar un documento>)

* .getFilter() sirve para extraer el filtro de la consulta realizada. Ejemplo

* .exec() o execPopulate() sirve para ejecutar la query o el populado

const query = Character.find({ name: 'Jean-Luc Picard' });
query.getFilter(); // { name: 'Jean-Luc Picard' }

* mongoose tiene varios validadores integrados. Estos son:
required
min
max
enum
match
minlength
maxlength

* unique no es un validador, es para crear indices unicos

* se pueden personalizar los mensajes de error. Existen dos formas, con array o con objetos. Ejemplo

const breakfastSchema = new Schema({
  eggs: {
    type: Number,
    min: [6, 'Must be at least 6, got {VALUE}'],
    max: 12
  },
  drink: {
    type: String,
    enum: {
      values: ['Coffee', 'Tea'],
      message: '{VALUE} is not supported'
    }
  }
});

* mongoose tiene 4 tipos de middleware ---> document middleware, model middleware, aggregate middleware, and query middleware.

* para popular primero en el schema debes referencias q la propiedad se referencia a otra. Ejemplo

const personSchema = Schema({
  _id: Schema.Types.ObjectId,
  name: String,
  age: Number,
  stories: [{ type: Schema.Types.ObjectId, ref: 'Story' }]
});

* Se puede hacer un populado con: objectId, string, number, buffer

* populate ---> popula un documento dentro de otro
* populated() ---> pregunta si un documento esta populado dentro de otro
* depopulate() ---> le saca el campo populado a un documento

* en el populate (que campo queremos popular, propiedad q queremos q traiga( por defecto si no ponemos nos trae todas)). Se pueden nestear populados. Ejemplo

* otra forma de usar el populate es con un objeto q puede tener las siguientes propiedades

populate({
  path: 'fans',
  match: { age: { $gte: 21 } },
  // Explicitly exclude `_id`,
  select: 'name -_id',
  options: { limit: 2 } // solo los primeros dos,
  populate: { objeto anidado para volver a popular}
}).

* Mongoose permite si ponemos la opcion timestamps: true setear dos valores en cada documento.

createdAt: una fecha de cuando se creo el documento
updatedAt: una fecha q se va actualizando de cada vez q cambiamos alguna propiedad del documento

* esto luego nos permite acceder al .createdAt() en el codigo para saber cuando fue

* para el tipado de los schemas se le pone extends Document. Ejemplo

import { Document, Schema, model, connect } from 'mongoose';

interface IUser extends Document {
  name: string;
  email: string;
  avatar?: string;
}

* aggregate es bueno cuando necesitas data dinamica, q cambia siempre. Por ejemplo la edad, esta la podemos sacar desde la fecha de nacimiento q es algo estatico.








** consultar
que es el .cursor() en mongoose
https://mongoosejs.com/docs/queries.html

que es hydrate()

que es agregacion bien

** estudiar mongoDB consultas y querys







