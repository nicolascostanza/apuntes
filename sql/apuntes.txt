* descargamos el mysql community server y tambien instalamos el workbench q te permite trabajar
* workbench es la gui para el gestor de la base de datos, desp el shell para hacerlo desde la termina y el server para levantar el servidor de la base de datos
* el puerto q nos da es 3306 y la password q puse es la dificil q uso siempre. El user es root
* sentencias DDL ---> para creacion de bases de datos (la estructura)
* sentencias DML ---> para manipular (hacer crud)
* te conectas dandole al boton de mas dentro de workbench y le das el nombre que queres. Despues las bases de datos se ven en la tab schemas
* siempre separar las palabras con guiones bajos
* con ctrl + espacio nos da autocompletado si no sabemos bien como puede ser el campo
* es buena practica a los campos como codigo postal o los q son numeros pero sabes q no vas a hacer operaciones aritmeticas ponerlos como string o texto para evitar q alguien cometa errores queriendo hacer cuentas
* para hacer una relacion de muchos a muchos entre dos tablas se hace una tabla intermedia generalmente llamada asi: nombre1Tabla_nombre2tabla. Y en esa solo contiene 2 columnas con los id de cada una apuntando a los ids de las otras(PK)
* si en algun encabezado de alguna columna tiene el nombre con "_id" sirve para identificarlo a otra tabla, entonces hay q agarrar uno q exista o ver como lo agregas, para crear una fila en alguna tabla primero tenemos q crear filas en otras tablas q estan relacionadas
* la clave foranea (FK) es la q apunta al id o PK de la tabla a la q vamos a referenciar
* se usa el UNIQUE en una relacion de uno a uno
* la pk es el identificador unico de la tabla q estamos declarando, en cambio la FK es el identificador de la tabla a la q vamos a referenciar en esta
* PK ---> clave unica q no se puede repetir
* ambiguedad ---> es cuando dos nombre de tablas o campos te dan iguales
* left o rigth join ---> trae solo lo q coinciden entre las 2 tablas y la tabla q este en esa posicion
* full outer join ---> te trae lo q no tiene intersecciuon entre las tablas (conjuntos)
* Diagrama UML ---> sirve para diseñar las tablas y sus relaciones

* FK es el id o PK de otra tabla. La PK es el identificador de la tabla en cuestion
* Las sentencias DDL son para la creacion de la estructura de la base de datos(create table) en cambio las sentencias DML son para manipularlas (actualizar una fila)


* TIPOS DE DATO
  ** BOOLEAN
  ** CHAR(1) (es un caracter)
  ** VARCHAR(longitud del string)
  ** TEXT(para textos largos)
  ** NUMERIC(cantidad de numeros, cantidad de decimales) sirve para numeros decimales
  ** INT
  ** DATE
  ** TIME

* COSAS QUE SE LE PUEDEN AGREGAR A CADA TIPO DE DATO
  ** NOT NULL ---> para que sea requerido. Campo obligatorio
  ** DEFAULT valor ---> pone un valor por defecto
  ** CURRENT_DATE ---> fecha actual
  ** SERIAL ---> le da un numero y lo autoincrementa cada vez q creo una nueva fila. Autoincremental
  ** PRIMARY KEY ---> hace q no pueda repetirse el valor de ese campo en cada fila. Clave unica
  ** UNIQUE ---> que ese campo de la fila sea unico.
  ** CHECK ---> restriccion en rangos de datos, restringue un campo con una condicion. Ej: salary NUMERIC(5,2) CHECK (salary > 0). Tambien podemos checkear fechas con esto.

* CREAR BASE DE DATOS
  CREATE DATABASE IF EXISTS nombreBaseDeDatos;

* BORRAR BASE DE DATOS
  DROP DATABASE IF EXISTS nombreBaseDeDatos;

* CREAR TABLA
  CREATE TABLE IF NOT EXISTS nombreQlePonemos(
    id INT,
    name VARCHAR,
  );

* BORRAR TABLA
  DROP DATABASE employees2;

* RENOMBRAR TABLA
  ALTER TABLE IF EXISTS nobreDeLaTabla RENAME TO nuevoNombreTabla;

* AGREGAR COLUMNA A LA TABLA
  ALTER TABLE nobmreTabla ADD COLUMN nombreParaLaColumna TipodeDato;

* BORRAR COLUMNA DE UNA TABLA
  ALTER TABLE nobmreTabla DROP COLUMN nombreParaLaColumna;

************* CRUD *******************
* se les puede poner al final de cada sentencia un RETURNING *; para q te devuelva todo o por ejemplo RETURNING id; para q te devuelva el id

* INSERTAR DATOS / CREAR DATOS / POST
  INSERT INTO nombreTabla (nombre columnas) VALUES (values para las columnas nombradas antes);

* GET ALL / LEER DATOS
  ** con el '*' te trae todo, sino podemos poner el campo que queremos traernos
  SELECT * FROM nombreTabla;
  SELECT id, email FROM nombreTabla;

* UPDATE / EDITAR / ACTUALIZAR / PUT
  ** importantisimo poner siempre el where sino te modifica todas las filas
  UPDATE nombreTabla SET campoElegido = ValorQueQueresPoner, campoElegido2 = ValorQueQueresPoner2 WHERE condicionParaElegirLaFila;   // ejemplo WHERE id = 5;

* ELIMINAR / DELETE
  ** obligatorio poner el where para condicionar y borrar solo las filas que queremos. Sino te borra todas
  ** si queremos burrar algun campo que sea nulo en la condicion ponemos campoElegido IS NULL;
  DELETE FROM nombreTabla WHERE condicion;

* FILTROS
  ** para traer solo las filas que queremos implementamos el WHERE. Separado por comas pasamos aquellas restricciones que querrramos. Podemos implementar AND y OR para agregas mas condiciones
  SELECT * FROM nombreTabla WHERE condicion1 AND condicion2 OR condicion3;

* LIKE ---> Selecionar los campos q tengan un cierto pedazo de string que queremos. En el ejemplo siguiente tenemos un like q es un 'como', y tenemos una expresion regular que empiece con A y que siga con cualquier cosa Ejemplo:
  SELECT * FROM city WHERE ciudad LIKE 'A%' ---> si ponemos "%palabrasQuequeremosBuscar%"  . sirve para q contengan ciertas palabras en el campo buscado

* CONSTRAINT ---> sirve para hacer los checks o dar las PK(primary key) o FK(foranean key). Ejemplo:
  CREATE TABLE Manufacturers (
    manufacturer_id INT PRIMARY KEY,
    manufacturer_name VARCHAR(50) NOT NULL
  );

  CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    product_name VARCHAR(50) NOT NULL,
    manufacturer_id INT,
    CONSTRAINT fk_Products_Manufacturers FOREIGN KEY (manufacturer_id) REFERENCES Manufacturers(manufacturer_id)
  );

  La tabla "Manufacturers" tiene dos columnas: "manufacturer_id" y "manufacturer_name". La columna "manufacturer_id" se define como clave primaria (PRIMARY KEY), lo que garantiza que cada valor sea único en la tabla. La columna "manufacturer_name" no puede ser nula (NOT NULL), lo que significa que siempre debe tener un valor.

  La tabla "Products" también tiene tres columnas: "product_id", "product_name" y "manufacturer_id". La columna "product_id" se define como clave primaria, asegurando la unicidad de los valores. La columna "product_name" también se define como no nula. La columna "manufacturer_id" se utiliza para establecer una relación con la tabla "Manufacturers" a través de una restricción de clave foránea (FOREIGN KEY). La restricción fk_Products_Manufacturers establece que los valores de la columna "manufacturer_id" en la tabla "Products" deben corresponder a los valores existentes en la columna "manufacturer_id" de la tabla "Manufacturers".

* BORRADO EN CASCADA ---> Ejemplo:
  CREATE TABLE nombreTabla(
    id SERIAL,
    name VARCHAR(50) NOT NULL,
    num_employees INT,
    id_manufacturer INT,
    CONSTRAINT pk_NombreDeEstaTabla PRIMARY KEY(campoElegido, gralmente id),
    CONSTRAINT fk_nombreDeEstaTabla_NombreDeLaTablaRelacionada FOREIGN KEY (nombre de uno de los campos en esta tabla q va a apuntar a la otra tabla, ej id_manufacturer) REFERENCES nombreDeLaOtraTabla(campoDeLaOtraTabla) ON UPDATE set null o cascade ON DELETE set null o cascade
  )
  ** el on update y on delete tenemos 2 opciones. set null o cascade ---> esto sirve para si en una llave foranea ponemos en cascada, si borramos la tabla de la cual estamos haciendo referencia con la clave foranea, automaticamente en cascada se borran en la tabla q estamos ahora. Y si ponemos set null si lo borramos solo este campo pasa a ser null en vez de borrarse en cascada

* tabla intermedia es una tabla q se encarga de relacionar dos tablas por sus PK, y q ademas podemos agregarle algunos datos extras. En estas tablas la PK se suele hacer con los id de las dos tablas relacionadas. Ejemplo:
  CREATE TABLE producto_marca (
    id_producto INT,
    id_marca INT,
    precio NUMERIC NOT NULL CHECK(price >= 0),
    CONSTRAINT pk_producto_marca PRIMARY KEY(id_producto, id_marca),
    CONSTRAINT fk_producto_marca FOREIGN KEY (id_producto) REFERENCES productos(Campo con pk de la tabla productos) ON UPDATE cascade ON DELETE cascade,
    CONSTRAINT fk_marca_producto FOREIGN KEY (id_marca) REFERENCES marca(Campo con pk de la tabla marca) ON UPDATE cascade ON DELETE cascade
  )

* FILTRADO QUE DEVUELVA ELEMENTOS UNICOS. Elimina los repetidos
  SELECT DISTINCT nombreCampo FROM nombreTabla;  ---> los trae solo una vez, elimina los repetidos

* ORDER BY ---> te los devuelve ordenados. Por defecto es asc, de a-z. Le podemos agregar DESC al final y lo cambia Ejemplo:
  SELECT * FROM nombreTabla WHERE not nombreCampo = laCondicion ORDER BY nombreCampo;

* FILTRADO CON AND OR Y NOT
  ** NOT ---> EJEMPLOS:
    SELECT * FROM nombreTabla WHERE nombreCampo != laCondicion;
    SELECT * FROM nombreTabla WHERE not nombreCampo = laCondicion;
    *** el != es distinto, tambien se puede poner not adelante del nombre del campo y cambiar el distinto en el medio de la condicion por un igual ('que no sea igual') y si ponemos = es solo los q cumplen la condicion
  ** OR ---> cumple o 1 o la otra. Ejemplo:
    SELECT * FROM nombreTabla WHERE Condicion OR otraCondicion;
  ** AND ---> debe cumplir ambas. Ejemplo:
    SELECT * FROM nombreTabla WHERE Condicion AND otraCondicion;

* se pueden contar la repeticion de veces de cada elemento en una columna.
  SELECT nombreCampo, count(mismoNombreCampo) FROM nombreTabla group by mismoNombreCampo;

* GROUP BY ---> agrupa los resultados por cada valor único en la columna que elegiste. Ejemplo
  SELECT producto, COUNT(producto) FROM ventas GROUP BY producto;
  La cláusula GROUP BY agrupa los resultados por cada valor único en la columna "producto", y la función de agregación COUNT() cuenta la cantidad de ocurrencias de cada valor en la columna seleccionada.

* JOINS ---> es para hacer consulta entre tablas relacionadas. Por ejemplo cuando en una tabla tenes el id de otra entonces tendrias q ir a la otra tabla a consultar tambien.
  ** inner join hacemos q coincidan todos los registros. Hacemos q coincidan. Se pueden concatenar todos los joins q querramos
  ** left, rigth hace q los resultados de las otras tablas sea derecha o izquierda no coincidan.
  ** ejemplo inner join:
    select camposQueQueresTablaElegida, camposQueQueresTablaRelacionada from TablaElegida INNER JOIN nombreTablaRelacionada ON nombreDeEstaTabla.NombreDelCampo = nombreDeLaTablaRelacionada.NombreDelCampoQueEsIgual

* ALIAS ---> si es un campo se le pone el as y a las tablas en el from o innerjoin se le pone al lado del nombre de la tabla

* CONCAT ---> podemos concatenar campos con espacios o como querramos en el medio. Ejemplo:
  SELECT CONCAT(nombre1Campo, ' ', nombre2Campo) from NombreTabla;

* IN ---> Sirve para dar las opciones por las cuales filtrar, si es que son varias. Ejemplo:
  SELECT * FROM nombreTabla WHERE nombreCampo IN(opcionesQueQueres)

* HAVING ---> Cuando tenemos funciones como el count por ejemplo que son funciones de agregacion podemos usar este comando para filtrarlo luego de obtener los resultados. Ya que el where no va a funcionar. Ejemplo de campo que te trae los q se repiten mas de una vez:
  SELECT last_name count(last_name) FROM NombreTable GROUP BY last_name HAVING count(last_name) > 1;

* SUM ---> es igual al count nada mas q en vez de contar suma

* SUB QUERIES ---> En el ejemplo de abajo msotramos un select anidado, seleccionamos los titulos de las peliculas donde el lenguaje sea ingles. Ejemplo:
  SELECT title FROM film
  WHERE language_id = (SELECT language_id FROM language WHERE name = 'English')
* VIEWS ---> con este codigo, podemos crear como 'funciones' que hacen lo q queremos y luego llamando esa linea lo ejecuta directamente. Sirve para guardar consultas. Ejemplo:
  create view numero_orden_por_empleados as
  select e.first_name, e.last_name, count(o.order_id) as numero_orden from orders o
  inner join employees e on o.employee_id = e.employee_id
  group by e.first_name, e.last_name
  order by numero_orden desc

  // entonces despues usamos lo de abajo y listo
  select * from numero_orden_por_empleados

* VISTAS MATERIALIZADAS ---> guarda los datos de la consulta. Entonces cuando llamamos a la lista ya tenemos los datos precargados y se van actualizando a medida q le vamos diciendo. Es como tenerlos de antes. Sirve si no van a modificarse, esto hace q cargue mas rapido.
  ** guardan fisicamente los resultados de una query y actualizan los datos periodicamente
  ** cachean el resultado de una query compleja y perminten refrescarlo
  ** para crear una vista materializada cargando datos tenemos la opcion WITH DATA. El no entre corchetes WITH [NOT] DATA es opcional.
  ** ejemplo:
    CREATE MATERIALIZED VIEW IF NOT EXISTS view_name AS
    query
    WITH [NOT] DATA;

* GENERATE_SERIES ---> sirve para cargar una tabla con data, inyectarle muchos campos
* EXPLAIN ANALYZE ---> nos devuelve q es lo q tiene encuenta el gestor de base de datos como mysql o postgress para las consultas
* INDEX ---> podemos asignarle indices a una tabla para q el scaneo sea mas rapido y no sea secuencial. Ejemplo
  create index idx_orders_pk on orders(order_id);
* PARTICIONAMIENTO ---> divide las tablas en partes para optimizar las consultas. Hay 3 tipos:
  ** Rango ---> fecha
  ** Lista ---> una columna
  ** hash ---> para repartirla equitativamente sin ninguna condicion