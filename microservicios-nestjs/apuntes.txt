lo que me dieron en discord:


Hace poco vi este pequeño roadmap en LinkedIn

Fundamentos de arquitectura de microservicios:

Comprender los conceptos básicos de microservicios y cómo se diferencian de las arquitecturas monolíticas.
Estudiar los principios de diseño de microservicios, como la alta cohesión, el bajo acoplamiento y la escalabilidad.
Tecnologías y herramientas relacionadas:

Familiarizarse con las tecnologías y herramientas comunes utilizadas en el desarrollo de microservicios, como Docker y Kubernetes para la contenerización y orquestación, respectivamente.
Aprender sobre sistemas de mensajería y colas de mensajes, como RabbitMQ o Apache Kafka, para la comunicación asíncrona entre microservicios.
Explorar frameworks y bibliotecas populares para el desarrollo de microservicios, como Spring Boot para Java o NestJS para Node.js.
Comunicación entre microservicios:

Comprender los diferentes patrones de comunicación utilizados en microservicios, como la sincronización mediante API REST, la comunicación asíncrona a través de colas de mensajes y el uso de protocolos como gRPC.
Estudiar cómo diseñar y gestionar interfaces de API para los microservicios, incluyendo consideraciones sobre versionado, seguridad y documentación.
Diseño y modelado de microservicios:

Aprender sobre los principios de diseño de dominio impulsado por microservicios (Domain-Driven Design, DDD) para crear límites de dominio claros y delimitar los microservicios.
Explorar técnicas y patrones para el diseño de microservicios, como el patrón Agregado, la separación de responsabilidades y el diseño orientado a eventos.
Escalabilidad y rendimiento:

Estudiar estrategias para escalar los microservicios horizontalmente y manejar la carga de manera eficiente.
Aprender a monitorear y optimizar el rendimiento de los microservicios, utilizando herramientas de monitorización y ajuste de rendimiento.
Despliegue y gestión de microservicios:

Aprender sobre estrategias de despliegue de microservicios, como la implementación continua (Continuous Deployment) y el despliegue basado en contenedores.
Explorar herramientas de gestión de infraestructuras y orquestación, como Kubernetes, para gestionar y escalar los microservicios en producción.
Seguridad y tolerancia a fallos:

Comprender los desafíos de seguridad en entornos de microservicios y aprender sobre las mejores prácticas para asegurar la comunicación y proteger los datos sensibles.
Estudiar estrategias de tolerancia a fallos y recuperación ante fallos en entornos distribuidos.

*******************************************************
Recomendacion para el challenge:

Lo mejor que puedes hacer para sacar un microservicio rapido es crear una api rest por cada microservicio y comunicarlas por http

podria crear ademas una api gateway para manejar las request de ambas

"Ahi dice que no debe ser accesible desde el localhost", Asi que cuando levantes las 2 apis mediante docker compose, solo expone expone los puertos de la primera
