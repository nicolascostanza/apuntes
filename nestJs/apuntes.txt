* Es un framework para construir aplicaciones web escalables y eficientes. Detras de escenas usa Express, aunque puede configurarse tambien para usar Fastify

* La principal diferenciacion de este framework es que proporciona una arquitectura de aplicaciones lista para usar que permite a los desarrolladores y equipos crear aplicaciones altamente comprobables, escalables, POCO ACOPLADAS y fáciles de mantener.

* Para iniciar un proyecto con nest tenemos q tener instalado el CLI y luego tirar nest new nombre_proyecto
* para crear algun modulo o lo que queramos, nos paramos en la terminal en la ruta raiz del proyecto y tiramos nest generate module nombre_modulo
* Tambien se pueden crear controllers, providers, etc

* Cuando levantamos un proyecto con nest tenemos el template basico dentro del src:
** controller ---> Un controlador básico con una sola ruta.
** service ---> Un servicio básico con un único método.
** module ---> El módulo raíz de la aplicación.
** specs ---> test
** main ---> El archivo de entrada de la aplicación que utiliza la función central NestFactory para crear una instancia de aplicación Nest.

*************************** CONTROLLERS ***************************

* Los controladores se encargan de gestionar las solicitudes entrantes y devolver las respuestas al cliente. Es la funcion donde esta la logica de negocios de los endpoints. Aca dejaremos un ejemplo de un controlador basico.

	import { Controller, Get } from '@nestjs/common';

	@Controller('cats')
	export class CatsController {
		@Get()
		findAll(): string {
			return 'This action returns all cats';
		}

		@Post()
		create(): string {
			return 'This action adds a new cat';
		}
	}

** @Controller ---> es un decorador basico que se utiliza para definir un controllador
** @Get() ---> dice que va a ser una request de tipo get y entre parentesis podemos pasarle parametros opcionales a la request
** findAll() ---> funcion a la que se va a dirigir cuando se haga una solicitud de ese tipo a ese endpoint. El nombre es totalmente arbitrario, debemos asignarle el que nos parezca

* Como maneja NestJS las respuestas ? Tiene dos formas:

1) el metodo por defecto, cuando se devuelve un objeto o array nest lo serializa a JSON automaticamente, sin embargo si devolvemos un valor primitivo (string, number, boolean, etc) nest lo devolvera sin serializar. En esta forma siempre las respuestas por defecto devuelven un status 200, excepto las de tipo POST que las devolvera con 201.

2) Podemos utilizar el objeto de respuesta específico de la biblioteca (por ejemplo, Express), que puede inyectarse utilizando el decorador @Res() en la firma del manejador del método (por ejemplo, findAll(@Res() response)). Con este enfoque, tienes la posibilidad de utilizar los métodos de gestión de respuesta nativos expuestos por ese objeto. Por ejemplo, con Express, puedes construir respuestas utilizando código como response.status(200).send().

* Se puede modificar el status code que devolvemos con el decorador @HttpCode(...)

* Como maneja NestJS la informacion que viene en la request ? Por defecto utiliza express. Ademas podemos acceder directamente a los del body en especifico con decoradores (ej: @Body() o @Query()) por lo tanto quedaria algo asi como el siguiente ejemplo:

import { Controller, Get, Req } from '@nestjs/common';
import { Request } from 'express';

	@Controller('cats')
	export class CatsController {
	@Get()
	findAll(@Req() request: Request): string {
		return 'This action returns all cats';
	}
	}

* Decoradores que podemos usar para obtener valores en los controllers:
@Request(), @Req()
@Response(), @Res()
@Headers
@Body(key?: string)
@Query(key?: string)
@Param(key?: string)
@Next()
@Headers(name?: string)
@Ip()
@HostParam()
@Session()

* Decoradores de metodos que tenemos disponibles:
@Get()
@Post()
@Put()
@Delete()
@Patch()
@Options()
@Head()
@All()

* Podemos utilizar patterns para las rutas y hacerlas matchear. Ejemplo:

	@Get('ab*cd') // el * indica q en la tercer posicion puede ir cualquier cosa
	findAll() {
		return 'This route uses a wildcard';
	}

* Para modificar el status de la response hacemos asi (esto solo aplica cuando la respuesta no es dinamica, siempre responde lo mismo):

	@Post()
	@HttpCode(204) // aca modificamos del 201 por defecto al 204
	create() {
		return 'This action adds a new cat';
	}

* Para modificar los headers de la respuesta podemos tomar por ejemplo con @Header('Cache-Control', 'none') o utilizar res.header()

* Para redirigir una respuesta a una URL específica, puede utilizar un decorador @Redirect() o res.redirect(). @Redirect() toma dos argumentos, url y statusCode, ambos son opcionales. El valor por defecto de statusCode es 302 (Found) si se omite. Ejemplo:

	@Get()
	@Redirect('https://nestjs.com', 301)

* Parametros de ruta. Ejemplo:

	@Get(':id')
	findOne(@Param('id') id: string): string {
		return `This action returns a #${id} cat`;
	}

* El decorador @Controller puede tomar como parametro opcional la url de donde necesita que vengan las request. Ejemplo:

	@Controller({ host: 'admin.example.com' })
	export class AdminController {
		@Get()
		index(): string {
			return 'Admin page';
		}
	}

* DTO ---> Un DTO es un objeto que define cómo se enviarán los datos a través de la red. Podríamos determinar el esquema DTO usando interfaces TypeScript, o mediante clases simples( Se recomienda usar clases ya que ts no existe en tiempo de ejecucion por lo tanto las pipes no podrian hacer referencia a las DTOs en tiempo de ejecucion). Ejemplo de una DTO:

	export class CreateCatDto {
		name: string;
		age: number;
		breed: string;
	}

	// despues en el controller la usamos:
	@Post()
	async create(@Body() createCatDto: CreateCatDto) {
		return 'This action adds a new cat';
	}

* Ejemplo de controladores basicos:

	import { Controller, Get, Query, Post, Body, Put, Param, Delete } from '@nestjs/common';
	import { CreateCatDto, UpdateCatDto, ListAllEntities } from './dto';

	@Controller('cats')
	export class CatsController {
		@Post()
		create(@Body() createCatDto: CreateCatDto) {
			return 'This action adds a new cat';
		}

		@Get()
		findAll(@Query() query: ListAllEntities) {
			return `This action returns all cats (limit: ${query.limit} items)`;
		}

		@Get(':id')
		findOne(@Param('id') id: string) {
			return `This action returns a #${id} cat`;
		}

		@Put(':id')
		update(@Param('id') id: string, @Body() updateCatDto: UpdateCatDto) {
			return `This action updates a #${id} cat`;
		}

		@Delete(':id')
		remove(@Param('id') id: string) {
			return `This action removes a #${id} cat`;
		}
	}

* Luego de crear los controllers correspondientes. Debemos insertarlos en el module. Para que nest haga la instancia. Ejemplo del app.module.ts

	import { Module } from '@nestjs/common';
	import { CatsController } from './cats/cats.controller';

	@Module({
		controllers: [CatsController],
	})
	export class AppModule {}

* Respuestas manejadas por librerias como express. Aunque este enfoque funciona, y de hecho permite más flexibilidad en algunos aspectos al proporcionar un control total del objeto de respuesta (manipulación de cabeceras, características específicas de la biblioteca, etc.), debe utilizarse con cuidado. En general, el enfoque es mucho menos claro y tiene algunas desventajas. La principal desventaja es que tu código se vuelve dependiente de la plataforma (ya que las bibliotecas subyacentes pueden tener diferentes APIs en el objeto de respuesta), y más difícil de probar (tendrás que simular el objeto de respuesta, etc.). Ejemplo:

	import { Controller, Get, Post, Res, HttpStatus } from '@nestjs/common';
	import { Response } from 'express';

	@Controller('cats')
	export class CatsController {
		@Post()
		create(@Res() res: Response) {
			res.status(HttpStatus.CREATED).send();
		}

		@Get()
		findAll(@Res() res: Response) {
			res.status(HttpStatus.OK).json([]);
		}
	}

*************************** PROVIDERS ***************************

* Anteriormente construimos un sencillo CatsController. Los controladores deben manejar peticiones HTTP y delegar tareas más complejas a los proveedores. Los proveedores son clases JavaScript simples que se declaran como proveedores en un módulo.

* Empecemos creando un simple CatsService. Este servicio será responsable del almacenamiento y recuperación de datos, y está diseñado para ser utilizado por el CatsController, por lo que es un buen candidato para ser definido como un proveedor. Ejemplo del Service:

	import { Injectable } from '@nestjs/common';
	import { Cat } from './interfaces/cat.interface';

	@Injectable()
	export class CatsService {
		private readonly cats: Cat[] = [];

		create(cat: Cat) {
			this.cats.push(cat);
		}

		findAll(): Cat[] {
			return this.cats;
		}
	}

	// definimos la interface
	export interface Cat {
		name: string;
		age: number;
		breed: string;
	}

* Luego de esto ahora tendriamos un controller que se encargaria de manejar la request HTTP y dejaria la logica mas compleja al service. Asi quedaria el controller:

	import { Controller, Get, Post, Body } from '@nestjs/common';
	import { CreateCatDto } from './dto/create-cat.dto';
	import { CatsService } from './cats.service';
	import { Cat } from './interfaces/cat.interface';

	@Controller('cats')
	export class CatsController {
		constructor(private catsService: CatsService) {}

		@Post()
		async create(@Body() createCatDto: CreateCatDto) {
			this.catsService.create(createCatDto);
		}

		@Get()
		async findAll(): Promise<Cat[]> {
			return this.catsService.findAll();
		}
	}

* Nest está construido alrededor del fuerte patrón de diseño comúnmente conocido como "Dependency injection". gracias a las capacidades de TypeScript, es extremadamente fácil gestionar dependencias porque se resuelven simplemente por tipo. En el siguiente ejemplo, Nest resolverá el catsService creando y devolviendo una instancia de CatsService (o, en el caso normal de un singleton, devolviendo la instancia existente si ya ha sido solicitada en otro lugar). Esta dependencia se resuelve y se pasa al constructor de su controlador (o se asigna a la propiedad indicada):

	constructor(private catsService: CatsService) {}

* Los providers suelen tener un tiempo de vida ("scope") sincronizado con el ciclo de vida de la aplicación. Cuando la aplicación arranca, todas las dependencias deben resolverse y, por tanto, todos los providers deben instanciarse. Del mismo modo, cuando la aplicación se cierra, cada proveedor será destruido. Sin embargo, hay maneras de hacer que el tiempo de vida de tu proveedor sea también request-scoped.

* El patrón de diseño "Dependency Injection" (Inyección de Dependencias) es una técnica utilizada para lograr un código más modular, flexible y fácil de probar en una aplicación. Para entenderlo mejor, consideremos un ejemplo sencillo: una aplicación de blog que tiene un controlador y un servicio. El controlador se encarga de manejar las solicitudes HTTP y el servicio se encarga de interactuar con una base de datos para obtener los datos del blog. Ejemplo:

	// Servicio de blog
	class BlogService {
	getAllPosts(): string[] {
		return ["Publicación 1", "Publicación 2", "Publicación 3"];
	}
	}

	// Controlador de blog
	class BlogController {
	private service: BlogService;

	constructor(service: BlogService) {
		this.service = service;
	}

	getAllPosts(): string[] {
		return this.service.getAllPosts();
	}
	}

	// Creación de instancias y uso
	const blogService = new BlogService(); // Creamos una instancia del servicio
	const blogController = new BlogController(blogService); // Pasamos la instancia del servicio al controlador

	console.log(blogController.getAllPosts()); // Llamamos al método getAllPosts del controlador

* Para que quede claro el concepto de services. Vendrian a ser como helpers que podremos reutilizar en nuestros controllers. Algunos ejemplos de para que se usan los services son los siguientes:

** solicitudes a la base de datos. Get by id. Get all. Delete, etc
** Lógica de negocio. Por ejemplo: un service que calcule el monto total del carrito, otro que restrinja por reglas de negocios la compras, etc.
** integración con servicios externos. Por ejemplo: apis de terceros, metodos de pagos
** Validación de datos
** Operaciones de transformación de datos como mapear objetos de un formato a otro, aplicar reglas de normalización o denormalización, y realizar cálculos o agregaciones complejas.

*********************** DIFERENCIA ENTRE CONTROLLER Y SERVICE **********************

La diferencia entre controllers y services. Los controllers son los que se encargan de manejar el flujo del endpoint. De decir que se va a hacer en casa momento. Y los services se encargan de aplicar la logica y solicitudes que necesita el controller para devolver un resultado

************************************************************************************

* Una vez que tenemos definido el service y el controller tenemos que declararlos en el archivo module. Ejemplo:

import { Module } from '@nestjs/common';
import { CatsController } from './cats/cats.controller';
import { CatsService } from './cats/cats.service';

@Module({
  controllers: [CatsController], // controller
  providers: [CatsService], // service
})
export class AppModule {}

*********************** MODULOS ***********************

* Un módulo es una clase anotada con un decorador @Module(). El decorador @Module() proporciona metadatos que Nest utiliza para organizar la estructura de la aplicación. Cada aplicación tiene al menos un módulo, un módulo raíz. El módulo raíz es el punto de partida que Nest utiliza para construir el gráfico de la aplicación, la estructura de datos interna que Nest utiliza para resolver las relaciones y dependencias entre módulos y proveedores.

* El decorador @Module() toma un único objeto cuyas propiedades describen el módulo:

** providers ---> los providers que serán instanciados por el inyector Nest y que pueden ser compartidos al menos a través de este módulo
** controllers ---> el conjunto de controladores definidos en este módulo que tienen que ser instanciados
** imports ---> la lista de módulos importados que exportan los providers que se requieren en este módulo
** exports ---> el subconjunto de providers que son proporcionados por este módulo y deben estar disponibles en otros módulos que importen este módulo. Puede utilizar el propio proveedor o sólo su token (proporcionar valor)

* Es importante saber que El módulo encapsula los providers por defecto. Esto significa que es imposible inyectar providers que no forman parte directamente del módulo actual ni se exportan desde los módulos importados. Por lo tanto, puedes considerar los providers exportados de un módulo como la interfaz pública del módulo, o API.

* Para modularizar la app, tenemos que por ejemplo agregar la carpeta "cats" y dentro poner todas las definiciones de su modulo. Luego en el module general de la aplicacion este modulo. Ejemplo:

	// en cats/cats.module.ts definimos el modulo particular, con sus controlers y providers
	import { Module } from '@nestjs/common';
	import { CatsController } from './cats.controller';
	import { CatsService } from './cats.service';

	@Module({
		controllers: [CatsController],
		providers: [CatsService],
	})
	export class CatsModule {}

	// despues en el modulo general, el de toda la app lo registramos asi:
	import { Module } from '@nestjs/common';
	import { CatsModule } from './cats/cats.module';

	@Module({
		imports: [CatsModule],
	})
	export class AppModule {}
	// asi quedaria la estructura de carpetas
	src
		cats
			dto
				create-cat.dto.ts
			interfaces
				cat.interface.ts
			cats.controller.ts
			cats.module.ts
			cats.service.ts
		app.module.ts
		main.ts

*********************** MODULOS COMPARTIDOS ***********************

* En Nest, los módulos son singletons por defecto, y por lo tanto se puede compartir la misma instancia de cualquier proveedor entre varios módulos sin esfuerzo. Cada módulo es automáticamente un módulo compartido. Una vez creado puede ser reutilizado por cualquier módulo. Imaginemos que queremos compartir una instancia de CatsService entre varios módulos. Para ello, primero tenemos que exportar el proveedor CatsService añadiéndolo a la matriz de exportaciones del módulo, como se muestra a continuación:

	import { Module } from '@nestjs/common';
	import { CatsController } from './cats.controller';
	import { CatsService } from './cats.service';

	@Module({
		controllers: [CatsController],
		providers: [CatsService],
		exports: [CatsService] // esta es la clave para que pueda ser reutilizable
	})
	export class CatsModule {}

 // ahora cada modulo que lo importe lo podra utilizar

*********************** MODULOS GLOBALES ***********************

* si se desea proporcionar un conjunto de providers que deben estar disponibles en todas partes fuera de la caja (por ejemplo, ayudantes, conexiones de base de datos, etc.), hacer que el módulo global con el @Global() decorador. Ejemplo:

	import { Module, Global } from '@nestjs/common';
	import { CatsController } from './cats.controller';
	import { CatsService } from './cats.service';

	@Global()
	@Module({
		controllers: [CatsController],
		providers: [CatsService],
		exports: [CatsService],
	})
	export class CatsModule {}


*********************** MODULOS DINAMICOS ***********************

*********************** MIDDLEWARES *****************************

* Los middlewares de nest son por defecto iguales a los de express. Ejemplo de un middleware basico en nestJS:

	import { Injectable, NestMiddleware } from '@nestjs/common';
	import { Request, Response, NextFunction } from 'express';

	@Injectable()
	export class LoggerMiddleware implements NestMiddleware {
		use(req: Request, res: Response, next: NextFunction) {
			console.log('Request...');
			next();
		}
	}
	// asi tendriamos un middleware de clase, pero podemos pasarlo a funcion asi:
	import { Request, Response, NextFunction } from 'express';

	export function logger(req: Request, res: Response, next: NextFunction) {
		console.log(`Request...`);
		next();
	};

* El middleware Nest es totalmente compatible con la inyección de dependencias. Al igual que con los providers y controllers, son capaces de inyectar dependencias que están disponibles dentro del mismo módulo. Como de costumbre, esto se hace a través del constructor.

* No hay lugar para middleware en el decorador @Module(). En su lugar, los configuramos utilizando el método configure() de la clase del módulo. Los módulos que incluyen middleware tienen que implementar la interfaz NestModule. Vamos a configurar el LoggerMiddleware en el nivel AppModule. Ejemplo de implementacion de un middleware para la ruta cats y el metodo get

	import { Module, NestModule, RequestMethod, MiddlewareConsumer } from '@nestjs/common';
	import { LoggerMiddleware } from './common/middleware/logger.middleware';
	import { CatsModule } from './cats/cats.module';

	@Module({
		imports: [CatsModule],
	})
	export class AppModule implements NestModule {
		configure(consumer: MiddlewareConsumer) {
			consumer
				.apply(LoggerMiddleware) // aplicamos el middleware
				.exclude(
					{ path: 'cats', method: RequestMethod.POST },
					'cats/(.*)',
				) // excluimos a la request post y a otras rutas con un comodin de ruta
				.forRoutes({ path: 'cats', method: RequestMethod.GET }); // que rutas toma el middleware
		}
	}

* aplicar multiples middlewares:

	consumer.apply(cors(), helmet(), logger).forRoutes(CatsController);

* aplicar middleware global:

	app.use(middleware);

*********************** FILTROS Y CAPAS DE EXCEPCIONES ***********************

* Nest viene con una capa de excepciones incorporada que es responsable de procesar todas las excepciones no manejadas a través de una aplicación. Cuando una excepción no es manejada por el código de su aplicación, es capturada por esta capa, que envía automáticamente una respuesta apropiada y fácil de usar.

* Cuando una excepción no es reconocida (no es ni HttpException ni una clase que herede de HttpException), el filtro de excepciones incorporado genera la siguiente respuesta JSON por defecto:

	{
		"statusCode": 500,
		"message": "Internal server error"
	}

* Nest proporciona una clase HttpException incorporada, expuesta desde el paquete @nestjs/common. Para aplicaciones típicas basadas en HTTP REST/GraphQL API. Ejemplo:

	@Get()
	async findAll() {
		throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
	}

* Ejemplo de como overridear la respuesta:

	@Get()
	async findAll() {
		try {
			await this.service.findAll()
		} catch (error) {
			throw new HttpException({
				status: HttpStatus.FORBIDDEN,
				error: 'This is a custom message',
			}, HttpStatus.FORBIDDEN, {
				cause: error
			});
		}
	}

* En muchos casos, no necesitarás escribir excepciones personalizadas, y puedes usar la excepción HTTP Nest incorporada, como se describe en la siguiente sección. Si necesita crear excepciones personalizadas, es una buena práctica crear su propia jerarquía de excepciones, donde sus excepciones personalizadas hereden de la clase base HttpException. Con este enfoque, Nest reconocerá sus excepciones y se encargará automáticamente de las respuestas de error. Implementemos una excepción personalizada:

	export class ForbiddenException extends HttpException {
		constructor() {
			super('Forbidden', HttpStatus.FORBIDDEN);
		}
	}

* Lista de las excepciones que ya vienen con el modulo HttpException desde @nestjs/common:

BadRequestException
UnauthorizedException
NotFoundException
ForbiddenException
NotAcceptableException
RequestTimeoutException
ConflictException
GoneException
HttpVersionNotSupportedException
PayloadTooLargeException
UnsupportedMediaTypeException
UnprocessableEntityException
InternalServerErrorException
NotImplementedException
ImATeapotException
MethodNotAllowedException
BadGatewayException
ServiceUnavailableException
GatewayTimeoutException
PreconditionFailedException

* Ejemplo de un manejador de errores para metodos http:

	import { ExceptionFilter, Catch, ArgumentsHost, HttpException } from '@nestjs/common';
	import { Request, Response } from 'express';

	@Catch(HttpException) // le informa q solo tomara excepciones http
	export class HttpExceptionFilter implements ExceptionFilter { // crea la clase manejadora de errores y la extiende la basica (ExceptionFilter)
		catch(exception: HttpException, host: ArgumentsHost) { // recibe los parametros necesarios, la excepcion y el host
			const ctx = host.switchToHttp();
			const response = ctx.getResponse<Response>();
			const request = ctx.getRequest<Request>();
			const status = exception.getStatus();
			// genera la respuesta dinamica y personalizada segun la excepcion que haya sido pasada por parametro
			response
				.status(status)
				.json({
					statusCode: status,
					timestamp: new Date().toISOString(),
					path: request.url,
				});
		}
	}

* ArgumentsHost es muy util para tener cosas de la request y la response, podemos ver como en el ejemplo de arriba tomamos los datos con eso

* Para usar estos filtros podemos hacerlo de dos formas:
1) Agregandolo en el modulo.ts de nuestro modulo:

	import { Module } from '@nestjs/common';
	import { APP_FILTER } from '@nestjs/core';
	import { HttpExceptionFilter } from './path/to/HttpExceptionFilter';

	@Module({
		providers: [
			{
				provide: APP_FILTER,
				useClass: HttpExceptionFilter,
			},
		],
	})
	export class AppModule {}

2) usando el decorador useFilters en el controller que lo necesitemos

	@Post()
	@UseFilters(new HttpExceptionFilter()) // esta fila tambien podria ser asi: @UseFilters(HttpExceptionFilter). Nose que diferencia hay, creo que estamos trayendo la clase en vez de instanciarla. Siempre es preferible usar las clases en vez de instanciar la clase.
	async create(@Body() createCatDto: CreateCatDto) {
		throw new ForbiddenException();
	}

* Para crear un filtro de manera global en la aplicacion y utilizarlo debemos hacer esto en nuestro archivo de entradad e la app:

	async function bootstrap() {
		const app = await NestFactory.create(AppModule);
		app.useGlobalFilters(new HttpExceptionFilter());
		await app.listen(3000);
	}
	bootstrap();

	// o en el module.ts general hacer esto:
	import { Module } from '@nestjs/common';
	import { APP_FILTER } from '@nestjs/core';

	@Module({
		providers: [
			{
				provide: APP_FILTER,
				useClass: HttpExceptionFilter,
			},
		],
	})
	export class AppModule {}

* Para atrapar todas las excepciones no manejadas (independientemente del tipo de excepción), deja vacía la lista de parámetros del decorador @Catch().










TODO:
aprender sobre modulos dinamicos
en la tab de overview quedan por estudiar, pipes, guards, interceptors y custom decorators

QUEDE ACA:
https://docs.nestjs.com/pipes#:~:text=ADS%20VIA%20CARBON-,Pipes,-A%20pipe%20is


