*********************************** DROPDOWN ***********************************

* instalar paquete https://www.npmjs.com/package/react-native-dropdown-select-list
* recibe 2 props obligatorias --> data y setSelected

*********************************** FLATLIST ***********************************

* le pasas:
    - la data como prop q es la info a renderizar
    - el componente q queres dejar fijo como header ---> stickyHeaderIndices={[0]}
    - El componente q va a quedar de encabezadoListHeaderComponent={() => <HeaderList />}
    - el item q va a renderizar por cada vez q tiene un elemento del array data ---> renderItem

*********************************** CRASH COURSE ***********************************
Div ---> View
P ---> Text
img (src)---> Image(source={{uri: 'url de la imagen'}})
input ---> TextInput
button ---> TouchableOpacity
onClick ---> onPress

* Para iniciar una app con expo ponemos npx create-expo-app nombreApp
* si damos expo start en la terminal y instalamos expo go en el celular, podemos escanear el codigo qr y tener la app en vivo en el celular
* para limpiar la barra esa q te sale con el stack navigator y el nombre q le hayas puesto en la cabecera de la aplicacion:

const navigator = useNavigation() // importamos desde @reac-navigation/native

useLayoutEffect(() => {
    navigation.setOptions({
        headerShown: false // ---> limpia esa parte
    })
}, [])

* para q tome la pantalla del celular sin la barrita de la bateria lo wrapeamos en <SafeAreaView></SafeAreaView> que viene importada desde react-native
* para los iconos usamos react native hero icons
* para q una parte del contenido ocupe todo el espacio le damos flex 1
* container scrolleable ---> ScrollView importada desde react native. Wrapeamos lo que queremos scrollear con esta etiqueta.
* para que el scroll sea horizonal ---> <ScrollView horizontal showsHorizontalScrollIndicator={false} contentContainerStyle={object css}>
* para navegar entre pantallas:

const navigation = useNavigation()

onPress={() => navigation.navigate('Nombre de la pantalla en el archivo de stack navigation',
    {
        // Aca podemos pasarle las props a la otra pantalla
    }
)}

* Para obtener las props q fueron pasadas a la pantalla por la navegacion:

const {params: { ...props } } = useRoute();

* para volver a la pantalla de atras

const navigation = useNavigation()

onPress={navigation.goBack}

* podemos detectar desde q tipo de dispositivo se esta utilizando la app con:

import { Platform} from 'react-native';

Platform.OS === 'ios' || 'android'

* tambien se probee Platform.select({}) ---> recibe uyn objeto con las plataformas y lo que queremos hacer

plaform({
    ios: {
        // lo que quiero
    },
    android: {
        // codigo
    },
    default: {
        // codigo
    }
})

* tambien podemos tener todo tipo de datos del celular como la version en Platform

* si a un archivo le ponemos .tipoDelSistema lo detecta y lo carga solo cuando lo necesita, esto es util para splitear codigo para diferentes dispositivos. Ejemplo:

BigButton.ios.js
BigButton.android.js

import BigButton from './BigButton'; // te importa cualquiera de los dos segun el tipo de dispositivo q este usando el usuario

* el fast refresh puede no modificar todo si tenemos algo memorizado con usememo o algo por el estilo, cuidado.

* en el emulador si apretamos ctrl + m tenemos el menu de desarrolladores

* tenemos la prop style en cada componente q le podemos pasar clases de css, ademas podemos pasarle mas de una. Ejemplo:

<Text style ={[styles.title, styles.fondo]} />

* si la imagen viene en base64 podemos pasarsela como source={{uri: imagenQQueremos}}

* Existe la etiqueta <ImageBackground source={...} /> que permite poner una imagen de fondo, ya q no existe la prop background image en css de react native

* tenemos props de css raras para los borders. Por ejemplo:  borterTopLeftRadius

* Tenemos la etiqueta Animated que podemos animar.

* Si queremos que el text se mantenga en una linea ponemos a la etiqueta text la pro numberOfLines={1}


************* a hacer

que hace en el textinput la prop keyboardType='default'

leer y estudiar la documentacion de animations en react native documentacion
leet y estudiar performance de react native documentacion



https://www.youtube.com/watch?v=AkEnidfZnCU&t=12309s

en la hora 3:49 empieza a explicar como setear redux toolkit y usarlo

quede en el 3:56
